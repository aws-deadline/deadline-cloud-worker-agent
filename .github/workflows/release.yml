name: Release

on:
  workflow_dispatch:
    inputs:
      version_to_publish:
        description: "Version to be release"
        required: false

jobs:
  UnitTests:
    name: Unit Tests
    uses: ./.github/workflows/reuse_python_build.yml
    with:
      branch: mainline
    secrets: inherit

  IntegrationTests:
    needs: UnitTests
    name: Integration Tests
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          ref: mainline
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_CODEBUILD_RELEASE_INTEG_ROLE }}
          aws-region: us-west-2
          mask-aws-account-id: true
      - name: Run CodeBuild
        uses: aws-actions/aws-codebuild-run-build@v1
        with:
          project-name: deadline-cloud-worker-agent-IntegTest
          hide-cloudwatch-logs: true
          env-vars-for-codebuild: |
            TEST_TYPE
        env:
          TEST_TYPE: WHEEL

  Merge:
    needs: IntegrationTests
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: release
          fetch-depth: 0
          token: ${{ secrets.CI_TOKEN }}
      - name: Set Git config
        run: |
          git config --local user.email "client-software-ci@amazon.com"
          git config --local user.name "client-software-ci"
      - name: Update Release
        run: git merge --ff-only origin/mainline -v
      - name: Push new release
        if: ${{ inputs.version_to_publish}}
        run: |
          git tag -a ${{ inputs.version_to_publish }} -m "Release ${{ inputs.version_to_publish }}"
          git push origin release ${{ inputs.version_to_publish }}
      - name: Push post release
        if: ${{ !inputs.version_to_publish}}
        run: git push origin release

  TestRelease:
    needs: Merge
    name: Test Release
    uses: ./.github/workflows/reuse_python_build.yml
    with:
      branch: release
    secrets: inherit

  PublishMirror:
    needs: TestRelease
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      CODEARTIFACT_REGION: "us-west-2"
      CODEARTIFACT_DOMAIN: ${{ secrets.CODEARTIFACT_DOMAIN }}
      CODEARTIFACT_ACCOUNT_ID: ${{ secrets.CODEARTIFACT_ACCOUNT_ID }}
      CODEARTIFACT_REPOSITORY: ${{ secrets.CODEARTIFACT_REPOSITORY }}
      CUSTOMER_DOMAIN: ${{ secrets.CUSTOMER_DOMAIN }}
      CUSTOMER_REPOSITORY: ${{ secrets.CUSTOMER_REPOSITORY }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          ref: release
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_CODEARTIFACT_ROLE }}
          aws-region: us-west-2
          mask-aws-account-id: true
      - name: Install dependencies
        run: |
          CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_ACCOUNT_ID }} --query authorizationToken --output text --region us-west-2)
          echo "::add-mask::$CODEARTIFACT_AUTH_TOKEN"
          echo CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN >> $GITHUB_ENV
          pip install --upgrade hatch
          pip install --upgrade twine
      - name: Run Build
        run: hatch build
      - name: Publish
        run: |
          export TWINE_USERNAME=aws
          export TWINE_PASSWORD=`aws codeartifact get-authorization-token --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_ACCOUNT_ID }} --query authorizationToken --output text`
          export TWINE_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_ACCOUNT_ID }} --repository ${{ secrets.CODEARTIFACT_REPOSITORY }} --format pypi --query repositoryEndpoint --output text`
          twine upload dist/*
      - name: Publish to Customer CodeArtifact
        run: |
          export TWINE_USERNAME=aws
          export TWINE_PASSWORD=`aws codeartifact get-authorization-token --domain ${{ secrets.CUSTOMER_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_ACCOUNT_ID }} --query authorizationToken --output text`
          export TWINE_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain ${{ secrets.CUSTOMER_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_ACCOUNT_ID }} --repository ${{ secrets.CUSTOMER_REPOSITORY }} --format pypi --query repositoryEndpoint --output text`
          twine upload dist/*
